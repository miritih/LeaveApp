<?php

/*
|--------------------------------------------------------------------------
| Application Routes
|--------------------------------------------------------------------------
|
| Here is where you can register all of the routes for an application.
| It's a breeze. Simply tell Laravel the URIs it should respond to
| and give it the Closure to execute when that URI is requested.
|
*/

Route::get('/', function()
{
	return View::make('index');
});
Route::get('eric', function()
{
	return "sasas[pas");
});
Route::get('/qalist', function()
{
   // collect request parameters
   $start  = isset($_REQUEST['start'])  ? $_REQUEST['start']  :  0;
   $count  = isset($_REQUEST['limit'])  ? $_REQUEST['limit']  : 50;
   $sort   = isset($_REQUEST['sort'])   ? json_decode($_REQUEST['sort'])   : null;
   $filters = isset($_REQUEST['filter']) ? $_REQUEST['filter'] : null;
   $sortProperty = $sort[0]->property;
   $sortDirection = $sort[0]->direction;

    // GridFilters sends filters as an Array if not json encoded
    if (is_array($filters)) {
        $encoded = false;
    } else {
        $encoded = true;
        $filters = json_decode($filters);
    }

    $where = '';
    $qs = '';

    // loop through filters sent by client
    if (is_array($filters)) {
        for ($i=0;$i<count($filters);$i++){
            $filter = $filters[$i];

            // assign filter data (location depends if encoded or not)
            if ($encoded) {
                $field = $filter->field;
                $value = $filter->value;
                $compare = isset($filter->comparison) ? $filter->comparison : null;
                $filterType = $filter->type;
            } else {
                $field = $filter['field'];
                $value = $filter['data']['value'];
                $compare = isset($filter['data']['comparison']) ? $filter['data']['comparison'] : null;
                $filterType = $filter['data']['type'];
            }

            switch($filterType){
                case 'string' : $qs .= "->where('".$field."', 'LIKE' ,'%".$value."%')"; Break;
                case 'list' :
                    if (strstr($value,',')){
                        $fi = explode(',',$value);
                        for ($q=0;$q<count($fi);$q++){
                            $fi[$q] = "'".$fi[$q]."'";
                        }
                        $value = implode(',',$fi);
                        $qs .= "->wherein(".$field.",".$value.")";
                    }else{
                        $qs .= " ->where('".$field."','=','".$value."')";
                    }
                Break;
                case 'boolean' : $qs .= " ->where('".$field."',' =', ".($value).")"; Break;
                case 'numeric' :
                    switch ($compare) {
                        case 'eq' : $qs .= "->where('".$field."',' =', ".$value.")"; Break;
                        case 'lt' : $qs .= "->where('".$field."',' <', ".$value.")"; Break;
                        case 'gt' : $qs .= "->where('".$field."',' >', ".$value.")"; Break;
                    }
                Break;
            }
        }
        $where .= $qs;
    }

   // $query =DB::table('QA').$where ->get();
return QAs::all();
});
Route::post('/filter/', function()
{
    $field=Input::get('name');
    $value=Input::get('value');
    $filter = QAs::where($field, '=', $value)->get();
return $filter;
});
